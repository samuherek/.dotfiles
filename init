#!/bin/bash

# function to style the echo output red.
red() {
    echo -e "\033[0;31m$1\033[0m"
}

# function to style the echo output green.
green() {
    echo -e "\033[0;32m$1\033[0m"
}

# ----------------
# INITIALIZATION
# ----------------

echo "Hello $(whoami)! Let's get you set up."

# Close any open System Preferences panes, to prevent them from overriding
# settings weâ€™re about to change
osascript -e 'tell application "System Preferences" to quit'

# ask for password up front.
echo "Please provide the password for $(whoami) to get you started:"
sudo -v

# Keep-alive: update existing `sudo` time stamp until `.macos` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# -----------------------------------------
# Ask to install xcode comand line tools
# -----------------------------------------
while true; do
    echo -n "Would you like to install xcode command line tools? [y/n]: "
    read xcode_answer

    case $xcode_answer in 
        [Yy]* )
            local xcode_path="./scripts/xcode/install.sh"

            # Check the existence of each script file
            if [ ! -f "$xcode_path" ]; then
                echo "Error: the $xcode_path does not exist." 
                echo "Contact the maintainer of the script to fix it."
                exit 1
            else 
                source "$xcode_path"
                green "XCode successfully installed."
            fi

            break
            ;;
        [Nn]* )
            green "Skipping installing xcode command line tools."
            break
            ;;
        * )
            echo "Invalid answer. Please respond with 'y' or 'n'."
            ;;
    esac
done 

# -----------------------------------------
# Ask to install homebrew 
# -----------------------------------------
while true; do
    echo -n "Would you like to install homebrew? [y/n]: "
    read brew_answer

    case $brew_answer in 
        [Yy]* )
            local brew_path="./scripts/homebrew/install.sh"

            # Check the existence of each script file
            if [ ! -f "$brew_path" ]; then
                echo "Error: the $formulas_path does not exist." 
                echo "Contact the maintainer of the script to fix it."
                exit 1
            else 
                source "$brew_path"
                green "Homebrew successfully installed."
            fi

            break
            ;;
        [Nn]* )
            green "Skipping installing homebrew."
            break
            ;;
        * )
            echo "Invalid answer. Please respond with 'y' or 'n'."
            ;;
    esac
done 

# -----------------------------------------
# Ask to intall brew formulas 
# -----------------------------------------
while true; do
    echo -n "Would you like to install brew formulas? [y/n]: "
    read formulas_answer

    case $formulas_answer in 
        [Yy]* )
            local formulas_path="./scripts/homebrew/install-formulas.sh"

            # Check the existence of each script file
            if [ ! -f "$formulas_path" ]; then
                echo "Error: the $formulas_path does not exist." 
                echo "Contact the maintainer of the script to fix it."
                exit 1
            else 
                source "$formulas_path"
                green "Brew formulas successfully installed."
            fi

            break
            ;;
        [Nn]* )
            green "Skipping installing brew formulas."
            break
            ;;
        * )
            echo "Invalid answer. Please respond with 'y' or 'n'."
            ;;
    esac
done 


# -----------------------------------------
# Ask to intall brew casks 
# -----------------------------------------
while true; do
    echo -n "Would you like to install brew casks? [y/n]: "
    read casks_answer

    case $casks_answer in 
        [Yy]* )
            local casks_path="./scripts/homebrew/install-casks.sh"

            # Check the existence of each script file
            if [ ! -f "$casks_path" ]; then
                echo "Error: the $casks_path does not exist." 
                echo "Contact the maintainer of the script to fix it."
                exit 1
            else 
                source "$casks_path"
                green "Brew casks successfully installed."
            fi

            break
            ;;
        [Nn]* )
            green "Skipping installing brew casks."
            break
            ;;
        * )
            echo "Invalid answer. Please respond with 'y' or 'n'."
            ;;
    esac
done 

# -----------------------------------------
# Ask to start skhd 
# -----------------------------------------
while true; do
    echo -n "Would you like to start skhd? [y/n]: "
    read skhd_answer

    case $skhd_answer in 
        [Yy]* )
            local skhd_path="./scripts/skhd/init.sh"

            # Check the existence of each script file
            if [ ! -f "$skhd_path" ]; then
                echo "Error: the $skhd_path does not exist." 
                echo "Contact the maintainer of the script to fix it."
                exit 1
            else 
                source "$skhd_path"
                green "skhd service started successfully."
            fi

            break
            ;;
        [Nn]* )
            green "Skipping starting skhd."
            break
            ;;
        * )
            echo "Invalid answer. Please respond with 'y' or 'n'."
            ;;
    esac
done 

# -----------------------------------------
# Ask to start yabai 
# -----------------------------------------
while true; do
    echo -n "Would you like to start yabai? [y/n]: "
    read yabai_answer

    case $yabai_answer in 
        [Yy]* )
            local yabai_path="./scripts/yabai/init.sh"

            # Check the existence of each script file
            if [ ! -f "$yabai_path" ]; then
                echo "Error: the $yabai_path does not exist." 
                echo "Contact the maintainer of the script to fix it."
                exit 1
            else 
                source "$yabai_path"
                green "Yabai service started successfully."
            fi

            break
            ;;
        [Nn]* )
            green "Skipping starting yabai."
            break
            ;;
        * )
            echo "Invalid answer. Please respond with 'y' or 'n'."
            ;;
    esac
done 

# -----------------------------------------
# Ask to apply the macos general defaults
# -----------------------------------------
while true; do
    echo -n "Would you like to apply the general defaults to macos settings? [y/n]: "
    read defaults_answer

    case $defaults_answer in 
        [Yy]* )
            local defaults_path="./scripts/defaults/init.sh"

            if [ ! -f "$defaults_path" ]; then
                echo "Could not find $defaults_path. Please contact the maintainer."
                exit 1
            else
                source "$defaults_path"
                green "macOS defaults applied. Make sure to restart your computer for them to take effect fully."
            fi

            break
            ;;
        [Nn]* )
            green "Skipping setting up macOS defaults."
            break
            ;;
        * )
            echo "Invalid answer. Please respond with 'y' or 'n'."
            ;;
    esac
done 

# -----------------------------------------
# Ask to load app defaults
# -----------------------------------------
while true; do
    echo -n "Would you like to set apps defaults? [y/n]: "
    read app_defaults_answer

    case $app_defaults_answer in 
        [Yy]* )
            local apps_path="./scipts/apps.sh"

            # Check the existence of each script file
            if [ ! -f "$apps_path" ]; then
                echo "Error: the $apps_path does not exist." 
                echo "Contact the maintainer of the script to fix it."
                exit 1
            else 
                source "$apps_path"
                green "App defaults successfully loaded."
            fi

            break
            ;;
        [Nn]* )
            green "Skipping loading app defaults."
            break
            ;;
        * )
            echo "Invalid answer. Please respond with 'y' or 'n'."
            ;;
    esac
done 

# -----------------------------------------
# Ask to stow config
# -----------------------------------------
while true; do
    echo -n "Would you like to stow the config dotfiles? [y/n]: "
    read stow_answer

    case $stow_answer in 
        [Yy]* )
            local stow_path="./scipts/stow/init.sh"

            # Check the existence of each script file
            if [ ! -f "$stow_path" ]; then
                echo "Error: the $stow_path does not exist." 
                echo "Contact the maintainer of the script to fix it."
                exit 1
            else 
                source "$stow_path"
                green "Config dotfiles stowed successfuly."
            fi

            break
            ;;
        [Nn]* )
            green "Skipping stowing config dotfiles."
            break
            ;;
        * )
            echo "Invalid answer. Please respond with 'y' or 'n'."
            ;;
    esac
done 

# -----------------------------------------
# Ask to configure the base folder structure
# -----------------------------------------
while true; do
    echo -n "Would you like to setup base directory structure? [y/n]: "
    read dir_answer

    case $dir_answer in 
        [Yy]* )
            local dir_path="./scipts/dir/init.sh"

            # Check the existence of each script file
            if [ ! -f "$dir_path" ]; then
                echo "Error: the $dir_path does not exist." 
                echo "Contact the maintainer of the script to fix it."
                exit 1
            else 
                source "$dir_path"
                green "Directory structure created successfuly."
            fi

            break
            ;;
        [Nn]* )
            green "Skipping directory structure creation."
            break
            ;;
        * )
            echo "Invalid answer. Please respond with 'y' or 'n'."
            ;;
    esac
done 

# -----------------------------------------
# Ask to run software updates 
# -----------------------------------------
while true; do
    echo -n "Would you like to update the system apps? [y/n]: "
    read sys_answer

    case $sys_answer in 
        [Yy]* )
            local sys_path="./scipts/system/update_apps.sh"

            # Check the existence of each script file
            if [ ! -f "$sys_path" ]; then
                echo "Error: the $sys_path does not exist." 
                echo "Contact the maintainer of the script to fix it."
                exit 1
            else 
                source "$sys_path"
                green "Sysmte update run successfuly."
            fi

            break
            ;;
        [Nn]* )
            green "Skipping system update."
            break
            ;;
        * )
            echo "Invalid answer. Please respond with 'y' or 'n'."
            ;;
    esac
done 

